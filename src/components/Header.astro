---
import { site } from '~/site.config';
const nav = site.nav;
---
<header class="bg-white text-slate-800 border-b">
  <div class="mx-auto max-w-7xl px-4 py-4 flex items-center justify-between">
    <a href="/" class="flex items-center gap-3 group">
      {site.logo && (
        <img src={site.logo} alt={`${site.name} logo`} class="h-10 w-10 object-contain" loading="eager" decoding="async" />
      )}
      <span class="font-semibold text-lg tracking-wide text-bulldog-orange group-hover:opacity-90">{site.name}</span>
    </a>

    <!-- Desktop Nav -->
    <nav class="hidden md:flex gap-6" id="main-nav">
      {nav.map((item, i) => (
        <div class="relative" data-menu>
          <a href={item.href ?? '#'} class="hover:text-bulldog-orange inline-flex items-center" data-trigger>
            {item.label}
            {item.children && (
              <svg viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 h-4 w-4 opacity-70"><path d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z"/></svg>
            )}
          </a>
          {item.children && (
            <div class="absolute left-0 mt-2 min-w-[14rem] rounded-xl border bg-white shadow-lg opacity-0 invisible transition" data-panel>
              <ul class="py-2">
                {item.children.map((child, j) => (
                  <li class="relative" data-submenu>
                    <a class="block px-4 py-2 text-sm hover:bg-slate-50 hover:text-bulldog-orange whitespace-nowrap" href={child.href ?? '#'} data-subtrigger>
                      {child.label}
                      {child.children && (<span class="absolute right-2 top-1/2 -translate-y-1/2 opacity-60">›</span>)}
                    </a>
                    {child.children && (
                      <div class="absolute top-0 left-full min-w-[14rem] rounded-xl border bg-white shadow-lg opacity-0 invisible transition" data-subpanel>
                        <ul class="py-2">
                          {child.children.map((gchild) => (
                            <li>
                              <a class="block px-4 py-2 text-sm hover:bg-slate-50 hover:text-bulldog-orange whitespace-nowrap" href={gchild.href}>{gchild.label}</a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      ))}
    </nav>

    <!-- Mobile hamburger -->
    <button id="menuToggle" class="md:hidden inline-flex items-center justify-center p-2 rounded-xl border hover:bg-slate-50" aria-label="Open menu" aria-expanded="false" aria-controls="mobileMenu">
      <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
    </button>
  </div>

  <!-- Mobile panel -->
  <div id="mobileMenu" class="md:hidden hidden border-t bg-white" data-open="false">
    <ul class="px-4 py-3 space-y-1">
      {nav.map((item) => (
        <li>
          {!item.children ? (
            <a href={item.href ?? '#'} class="block px-2 py-2 rounded-lg hover:bg-slate-50">{item.label}</a>
          ) : (
            <div>
              <button class="w-full flex items-center justify-between px-2 py-2 rounded-lg hover:bg-slate-50" data-acc>
                <span>{item.label}</span>
                <span class="ml-2 text-slate-500">▾</span>
              </button>
              <ul class="max-h-0 overflow-hidden transition-[max-height] duration-300 pl-3" data-acc-panel>
                {item.children.map((child) => (
                  <li class="py-1">
                    {!child.children ? (
                      <a href={child.href ?? '#'} class="block px-2 py-2 rounded-lg hover:bg-slate-50">{child.label}</a>
                    ) : (
                      <div>
                        <button class="w-full flex items-center justify-between px-2 py-2 rounded-lg hover:bg-slate-50" data-acc>
                          <span>{child.label}</span>
                          <span class="ml-2 text-slate-500">▸</span>
                        </button>
                        <ul class="max-h-0 overflow-hidden transition-[max-height] duration-300 pl-3" data-acc-panel>
                          {child.children.map((gchild) => (
                            <li class="py-1">
                              <a href={gchild.href} class="block px-2 py-2 rounded-lg hover:bg-slate-50">{gchild.label}</a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </li>
      ))}
    </ul>
  </div>

  <script is:inline>
    // Desktop hover-intent (already present) + Mobile toggles
    (function(){
      // existing desktop hover code remains; we only add mobile JS here
      const btn = document.getElementById('menuToggle');
      const panel = document.getElementById('mobileMenu');
      if(btn && panel){
        btn.addEventListener('click', () => {
          const open = panel.dataset.open === 'true';
          panel.dataset.open = String(!open);
          btn.setAttribute('aria-expanded', String(!open));
          panel.classList.toggle('hidden', open);
        });
        // Close on Escape
        document.addEventListener('keydown', (e)=>{
          if(e.key === 'Escape' && panel.dataset.open === 'true'){
            panel.dataset.open = 'false';
            btn.setAttribute('aria-expanded','false');
            panel.classList.add('hidden');
          }
        });
        // Accordion behavior
        panel.querySelectorAll('[data-acc]').forEach((accBtn)=>{
          const next = accBtn.nextElementSibling;
          accBtn.addEventListener('click', ()=>{
            const expanded = accBtn.getAttribute('aria-expanded') === 'true';
            accBtn.setAttribute('aria-expanded', String(!expanded));
            if(next){
              if(expanded){ next.style.maxHeight = '0px'; }
              else { next.style.maxHeight = next.scrollHeight + 'px'; }
            }
          });
        });
        // Close menu when clicking a link
        panel.querySelectorAll('a[href]').forEach((a)=>{
          a.addEventListener('click', ()=>{
            panel.dataset.open = 'false';
            btn.setAttribute('aria-expanded','false');
            panel.classList.add('hidden');
          });
        });
      }
    })();
  </script>
</header>